syntax = "proto3";
package hw.trezor.messages.apla;

// Sugar for easier handling in Java
option java_package = "com.satoshilabs.trezor.lib.protobuf";
option java_outer_classname = "TrezorMessageApla";

/**
 * Request: Ask device for Apla address corresponding to address_n path
 * @start
 * @next AplaWallet
 * @next Failure
 */
message AplaGetWallet {
    repeated uint32 address_n = 1;  // BIP-32 path to derive the key from master node
    optional bool show_display = 2; // optionally show on display before sending the result
}

/**
 * Response: Contains an Apla wallet derived from device private seed
 * @end
 */
message AplaWallet {
    required string address = 1; 
}


/**
 * Request: Ask device for Apla address corresponding to address_n path
 * @start
 * @next AplaPublicKey
 * @next Failure
 */
message AplaGetPublicKey {
    repeated uint32 address_n = 1;  // BIP-32 path to derive the key from master node
    optional bool show_display = 2; // optionally show on display before sending the result
}


/**
 * Response: Contains an Apla public key
 * @end
 */
message AplaPublicKey {
    optional bytes public_key = 1;     
}

/**
 * Request: Ask device to sign the message
 * @start
 * @next AplaSignedMessage
 * @next Failure
 */
 message AplaSignMessage{
    repeated uint32 address_n = 1;  // BIP-32 path to derive the key from master node
    optional bytes message = 2;
    optional string ask_for_confirmation = 3;    
}

/**
 * Response: Contains an Apla signed message
 * @end
 */
message AplaMessageSignature{
    optional bytes signature = 1;
    optional bytes public_key = 2;
}


/**
 * Request: Ask device to sign the transaction
 * @start
 * @next AplaSignedTransaction
 * @next Failure
 */
 message AplaSignTransaction{
    required AplaTransactionHeader Header = 1;
    optional string MaxSum = 2;
    optional string PayOver = 3;
    map<string, any> Params = 4;
    
    /**
    * AplaTransactionHeader represents header for transaction
    *
    */ 
    message AplaTransactionHeader{
        required int64 ID = 1;           
        required int64 Time = 2;
        required int64 EcosystemID= 3;   
        required int64 NetworkID = 4;   
        required bytes PublicKey = 5;   
        required int64 KeyID = 6;   
    }
 }


