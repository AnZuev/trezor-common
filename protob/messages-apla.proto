syntax = "proto2";
package hw.trezor.messages.apla;

// Sugar for easier handling in Java
option java_package = "com.satoshilabs.trezor.lib.protobuf";
option java_outer_classname = "TrezorMessageApla";

/**
 * Request: Ask device for Apla address corresponding to address_n path
 * @start
 * @next AplaAddress
 * @next Failure
 */
message AplaGetAddress {
    repeated uint32 address_n = 1;  // BIP-32 path to derive the key from master node
    optional bool show_display = 2; // optionally show on display before sending the result
}

/**
 * Response: Contains an Apla address derived from device private seed
 * @end
 */
message AplaAddress {
    required bytes address = 1; 
}


/**
 * Request: Ask device for Apla address corresponding to address_n path
 * @start
 * @next AplaPublicKey
 * @next Failure
 */
message AplaGetPublicKey {
    repeated uint32 address_n = 1;  // BIP-32 path to derive the key from master node
    optional bool show_display = 2; // optionally show on display before sending the result
}


/**
 * Response: Contains an Apla public key
 * @end
 */
message AplaPublicKey {
    required string public_key = 1;     
}


/**
 * Request: Ask device for Apla address corresponding to address_n path
 * @start
 * @next AplaPrivateKey
 * @next Failure
 */
 message AplaGetPrivateKey {
    repeated uint32 address_n = 1;  // BIP-32 path to derive the key from master node
    optional bool show_display = 2;     
}

/**
 * Response: Contains an Apla private key
 * @end
 */
message AplaPrivateKey {
    required string private_key = 1;     
}


/**
 * Request: Ask device to sign the transaction
 * @start
 * @next AplaSignedTransaction
 * @next Failure
 */
 message AplaSignTransaction {
    repeated uint32 address_n = 1;  // BIP-32 path to derive the key from master node
    optional bool show_display = 2; 
    repeated bytes transaction = 3;    
}

/**
 * Response: Contains an Apla signed transaction
 * @end
 */
message AplaSignedTransaction {
    required bytes signed_transaction = 1;     
}

